// 指定使用 proto3 语法

// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: proto/voting/voting.proto

// 定义包名
package votingconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	voting "voting-service/gen/proto/voting"

	connect "connectrpc.com/connect"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// VotingServiceName is the fully-qualified name of the VotingService service.
	VotingServiceName = "voting.VotingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VotingServiceGetVotingOptionsProcedure is the fully-qualified name of the VotingService's
	// GetVotingOptions RPC.
	VotingServiceGetVotingOptionsProcedure = "/voting.VotingService/GetVotingOptions"
	// VotingServiceVoteProcedure is the fully-qualified name of the VotingService's Vote RPC.
	VotingServiceVoteProcedure = "/voting.VotingService/Vote"
	// VotingServiceGetResultsProcedure is the fully-qualified name of the VotingService's GetResults
	// RPC.
	VotingServiceGetResultsProcedure = "/voting.VotingService/GetResults"
)

// VotingServiceClient is a client for the voting.VotingService service.
type VotingServiceClient interface {
	// 获取投票主题和选项
	GetVotingOptions(context.Context, *connect.Request[voting.GetVotingOptionsRequest]) (*connect.Response[voting.GetVotingOptionsResponse], error)
	// 提交投票
	Vote(context.Context, *connect.Request[voting.VoteRequest]) (*connect.Response[voting.VoteResponse], error)
	// 获取投票结果
	GetResults(context.Context, *connect.Request[voting.GetResultsRequest]) (*connect.Response[voting.GetResultsResponse], error)
}

// NewVotingServiceClient constructs a client for the voting.VotingService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVotingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VotingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &votingServiceClient{
		getVotingOptions: connect.NewClient[voting.GetVotingOptionsRequest, voting.GetVotingOptionsResponse](
			httpClient,
			baseURL+VotingServiceGetVotingOptionsProcedure,
			opts...,
		),
		vote: connect.NewClient[voting.VoteRequest, voting.VoteResponse](
			httpClient,
			baseURL+VotingServiceVoteProcedure,
			opts...,
		),
		getResults: connect.NewClient[voting.GetResultsRequest, voting.GetResultsResponse](
			httpClient,
			baseURL+VotingServiceGetResultsProcedure,
			opts...,
		),
	}
}

// votingServiceClient implements VotingServiceClient.
type votingServiceClient struct {
	getVotingOptions *connect.Client[voting.GetVotingOptionsRequest, voting.GetVotingOptionsResponse]
	vote             *connect.Client[voting.VoteRequest, voting.VoteResponse]
	getResults       *connect.Client[voting.GetResultsRequest, voting.GetResultsResponse]
}

// GetVotingOptions calls voting.VotingService.GetVotingOptions.
func (c *votingServiceClient) GetVotingOptions(ctx context.Context, req *connect.Request[voting.GetVotingOptionsRequest]) (*connect.Response[voting.GetVotingOptionsResponse], error) {
	return c.getVotingOptions.CallUnary(ctx, req)
}

// Vote calls voting.VotingService.Vote.
func (c *votingServiceClient) Vote(ctx context.Context, req *connect.Request[voting.VoteRequest]) (*connect.Response[voting.VoteResponse], error) {
	return c.vote.CallUnary(ctx, req)
}

// GetResults calls voting.VotingService.GetResults.
func (c *votingServiceClient) GetResults(ctx context.Context, req *connect.Request[voting.GetResultsRequest]) (*connect.Response[voting.GetResultsResponse], error) {
	return c.getResults.CallUnary(ctx, req)
}

// VotingServiceHandler is an implementation of the voting.VotingService service.
type VotingServiceHandler interface {
	// 获取投票主题和选项
	GetVotingOptions(context.Context, *connect.Request[voting.GetVotingOptionsRequest]) (*connect.Response[voting.GetVotingOptionsResponse], error)
	// 提交投票
	Vote(context.Context, *connect.Request[voting.VoteRequest]) (*connect.Response[voting.VoteResponse], error)
	// 获取投票结果
	GetResults(context.Context, *connect.Request[voting.GetResultsRequest]) (*connect.Response[voting.GetResultsResponse], error)
}

// NewVotingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVotingServiceHandler(svc VotingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	votingServiceGetVotingOptionsHandler := connect.NewUnaryHandler(
		VotingServiceGetVotingOptionsProcedure,
		svc.GetVotingOptions,
		opts...,
	)
	votingServiceVoteHandler := connect.NewUnaryHandler(
		VotingServiceVoteProcedure,
		svc.Vote,
		opts...,
	)
	votingServiceGetResultsHandler := connect.NewUnaryHandler(
		VotingServiceGetResultsProcedure,
		svc.GetResults,
		opts...,
	)
	return "/voting.VotingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VotingServiceGetVotingOptionsProcedure:
			votingServiceGetVotingOptionsHandler.ServeHTTP(w, r)
		case VotingServiceVoteProcedure:
			votingServiceVoteHandler.ServeHTTP(w, r)
		case VotingServiceGetResultsProcedure:
			votingServiceGetResultsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVotingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVotingServiceHandler struct{}

func (UnimplementedVotingServiceHandler) GetVotingOptions(context.Context, *connect.Request[voting.GetVotingOptionsRequest]) (*connect.Response[voting.GetVotingOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("voting.VotingService.GetVotingOptions is not implemented"))
}

func (UnimplementedVotingServiceHandler) Vote(context.Context, *connect.Request[voting.VoteRequest]) (*connect.Response[voting.VoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("voting.VotingService.Vote is not implemented"))
}

func (UnimplementedVotingServiceHandler) GetResults(context.Context, *connect.Request[voting.GetResultsRequest]) (*connect.Response[voting.GetResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("voting.VotingService.GetResults is not implemented"))
}
